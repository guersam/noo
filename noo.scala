//> using scala "2.13.10"
//> using option "-Xsource:3"
//> using lib "dev.zio::zio:2.0.4"
//> using lib "dev.zio::zio-http:0.0.3"

import zio.*
import zio.http.*
import zio.http.model.Method

object Main extends ZIOAppDefault {

  case class Property(name: String, description: String)

  val properties = Vector(
    Property("1. Levels of Scale", "Centers intensify each other when they are different in size. The gap between different scales must not be very large, and practically, one center would be half or twice the size of another. If there is a well-ordered range of sizes, a field effect is formed, and then, a whole is made by tying the centers together."),
    Property("2. Strong Centers", "A living whole contains strong centers within it. The concept of a strong center is applied recursively; every strong center is made up from multiple smaller strong centers. Nevertheless, there is often a principal strong center in a whole. The strong center has a field effect generated by nesting."),
    Property("3. Boundaries", "The ring-like center, made up from smaller centers, forms a field-like effect that intensifies the center that is bounded. It also unites the center that is boun- ded with the world beyond the boundary. Note that the order of the magnitude of the boundary and the center that is bounded needs to be same."),
    Property("4. Alternating Repetition", "Centers are intensified when they repeat with subtle varia- tion. Alternating repetition is not just simple repetition because what are repeated are modified according to their positions in a whole. When this rule is applied recursively to all entities, spaces between the entities, and the process of repetition, beautiful harmony is created. The pattern of repeating centers forms the field effect, and as a result, wholeness emerges."),
    Property("5. Positive Space", "A living whole only has strong centers, where every part of space has the positive shape as a center. There is never any leftover from an adjacent shape."),
    Property("6. Good Shape", "A living whole has a good shape as a whole that is made up from multiple coherent centers. The good shape is the attribute of the whole, but the whole must be made up from intense centers that themselves are wholes. In that sense, the elements of a good shape are also good shapes themselves. Note that the result of a good shape is not only to make things beautiful but also to make them more pro- found and effective."),
    Property("7. Local Symmetries", "A living whole contains various symmetrical segments that inter- lock and overlap with each other. This feature of symmetry is called local symmetry to distinguish from overall symmetry. Each local symmetrical segment consists of smaller centers and creates a coherence of the centers. Local symmetries are not distinct but overlap with each other. This continuous overlapping of local symmetries works as a glue that establishes a whole."),
    Property("8. Deep Interlock and Ambiguity", "A living whole has some forms that interlock cen- ters with its surroundings. The centers and their surroundings interpenetrate through a third set of centers that ambiguously belong to both."),
    Property("9. Contrast", "A center is intensified by the sharp distinction between the character of the center and surrounding centers. For example, the forms of contrast are black/ white, dark/light, empty/full, solid/void, and busy/silent. The difference between oppo- sites not only separates things but also brings them together."),
    Property("10. Gradients", "Qualities vary gradually, not suddenly, across space in a living whole. A graded series of different-sized centers forms new centers that have a field effect as a whole. These gradients are caused by responding to the natural variation of the circumstance."),
    Property("11. Roughness", "Living wholes have some local irregularities within them. The irregula- rities are caused by adapting to irregularities in the environment and responding to the demands and constraints from other nearby centers, not by arbitrary decisions in the design. In that sense, roughness is a form of perfection."),
    Property("12. Echoes", "A living whole contains deep underlying similarities within it. These simila- rities do not exist merely at a superficial level, but they exist in a deeper level of the structure, derived from similarities in the process of creating them. The similarities of elements attach them together to form a unity."),
    Property("13. The Void", "Centers are intensified by the existence of an empty center. This emptiness needs to exist in the field to preserve the balance between calmness and emptiness."),
    Property("14. Simplicity and Inner Calm", "A living whole has certain slowness, majesty, and quiet- ness, i.e., a state of inner calm. This quality derives from inner simplicity, where ever- ything that is unnecessary is removed. It does not refer to simplicity in the superficial sense but refers to the true simplicity of the heart."),
    Property("15. Not-separatedness", "In a living whole, any centers deeply connect and melt into their surroundings, not separate from them. They are merged inseparably, but they still have their character and personality. To achieve this connectedness, the boundary between the centers and their surroundings are fragmented or gradient. As a result of this deep coherence, things feel completely at peace."),
  )

  val app: HttpApp[Any, Nothing] = Http.collect[Request] {
    case Method.GET -> !! =>
      import zio.http.html.*
      Response.html(
        html(
          body(
            a(href := "15-properties", "15 properties"),
            br(),
            a(href := "15-properties/random", "random property"),
          )
        )
      )

    case Method.GET -> !! / "15-properties" =>
      val lines = properties.map { p => s"${p.name}\n\n${p.description}" }
      Response.text(lines.mkString("\n\n--\n\n"))

    case Method.GET -> !! / "15-properties" / "random" =>
      val picked = scala.util.Random.shuffle(properties).head
      Response.text(s"${picked.name}\n\n${picked.description}")
  }

  override val run =
    Server.serve(app).provide(Server.default)
}